#!/usr/bin/env python

import rospy
from sensor_msgs.msg import JointState
import numpy as np
from markers import *
from functions import *

rospy.init_node("test_fkine")
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)
bmarker = BallMarker(color['GREEN'])

# Joint names
jnames = ['FL_HAA', 'FL_HFE', 'FL_KFE', 'FR_HAA', 'FR_HFE', 'FR_KFE', 'HL_HAA', 'HL_HFE', 'HL_KFE', 'HR_HAA', 'HR_HFE', 'HR_KFE']


# Joint Configuration
q_fl = [0.4, -0.6, 0.8] # Pata izquierda delantera
q_fr = [0, 0, 0]       # Pata derecha delantera
q_hl = [0, 0, 0]       # Pata izquierda trasera
q_hr = [0, 0, 0]       # Pata derecha trasera
q = np.hstack((q_fl, q_fr, q_hl, q_hr))

# End effector with respect to the base
T_bl, Te = fkine_solo(q_fl)
print( np.round(T_bl, 3) )
bmarker.position(T_bl)

# Object (message) whose type is JointState
jstate = JointState()
# Set values to the message
jstate.header.stamp = rospy.Time.now()
jstate.name = jnames
# Add the head joint value (with value 0) to the joints
jstate.position = q

# Loop rate (in Hz)
rate = rospy.Rate(100)
# Continuous execution loop
while not rospy.is_shutdown():
    # Current time (needed for ROS)
    jstate.header.stamp = rospy.Time.now()
    # Publish the message
    pub.publish(jstate)
    bmarker.publish()
    # Wait for the next iteration
    rate.sleep()